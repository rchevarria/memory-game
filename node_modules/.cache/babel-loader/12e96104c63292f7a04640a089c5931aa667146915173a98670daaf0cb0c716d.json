{"ast":null,"code":"var _jsxFileName = \"/Users/ryanchevarria/Desktop/memory-game/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"img/tnt.png\",\n  matched: false\n},\n//path to images\n{\n  \"src\": \"img/furnace.png\",\n  matched: false\n}, {\n  \"src\": \"img/creeper.png\",\n  matched: false\n}, {\n  \"src\": \"img/sword.png\",\n  matched: false\n}, {\n  \"src\": \"img/craft.png\",\n  matched: false\n}, {\n  \"src\": \"img/steve.png\",\n  matched: false\n}, {\n  \"src\": \"img/pig.png\",\n  matched: false\n}, {\n  \"src\": \"img/zombie.png\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [firstChoice, setChoiceOne] = useState(null);\n  const [secondChoice, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [turns, setTurns] = useState(0);\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    })); //shuffling cards and giving them an ID\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  //handling user choice\n\n  const handleChoice = card => {\n    if (firstChoice == null) {\n      setChoiceOne(card);\n    } else {\n      setChoiceTwo(card);\n    }\n  };\n\n  //Compare the selected cards\n\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      setDisabled(true);\n      if (firstChoice.src === secondChoice.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src == firstChoice.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        reset();\n      } else {\n        setTimeout(() => reset(), 900);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n\n  //reset choices and increases turns\n  const reset = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setDisabled(false);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Minecraft Memory Game \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"start-button\", {\n      onClick: shuffleCards,\n      children: \" New Game \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\" Moves: \", turns, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === firstChoice || card === secondChoice || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"mnkOs/pH7NqTmF9lD/WGagrspW0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Card","cardImages","matched","App","cards","setCards","firstChoice","setChoiceOne","secondChoice","setChoiceTwo","disabled","setDisabled","turns","setTurns","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","reset","setTimeout","prevTurns"],"sources":["/Users/ryanchevarria/Desktop/memory-game/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react'\nimport Card from './Card'\n\nconst cardImages = [\n    {\"src\": \"img/tnt.png\", matched: false},         //path to images\n    {\"src\": \"img/furnace.png\", matched: false},\n    {\"src\": \"img/creeper.png\", matched: false},\n    {\"src\": \"img/sword.png\", matched: false},\n    {\"src\": \"img/craft.png\", matched: false},\n    {\"src\": \"img/steve.png\", matched: false},\n    {\"src\": \"img/pig.png\", matched: false},\n    {\"src\": \"img/zombie.png\", matched: false}\n]\n\nfunction App() {\n    \n    const [cards, setCards] = useState([])\n    const [firstChoice, setChoiceOne] = useState(null)\n    const [secondChoice, setChoiceTwo] = useState(null)\n    \n    \n    const [disabled, setDisabled] = useState(false)\n    const [turns, setTurns] = useState(0)\n    \n    const shuffleCards = () => {\n        const shuffledCards = [...cardImages, ...cardImages]\n            .sort(() => Math.random() - 0.5)\n            .map((card) => ({...card, id: Math.random() })) //shuffling cards and giving them an ID\n        \n        setChoiceOne(null)\n        setChoiceTwo(null)\n        setCards(shuffledCards)\n        setTurns(0)\n    }\n    \n    //handling user choice\n    \n    const handleChoice = (card) => {\n        if(firstChoice == null){\n            setChoiceOne(card)\n        }\n        else{\n            setChoiceTwo(card)\n        }\n    }\n\n    //Compare the selected cards\n    \n    useEffect(() => {\n        if(firstChoice && secondChoice){\n            setDisabled(true)\n            if(firstChoice.src === secondChoice.src){\n                setCards(prevCards => {\n                    return prevCards.map(card => {\n                        if(card.src == firstChoice.src){\n                            return {...card, matched: true}\n                        }else{\n                            return card\n                        }\n                    })\n                })\n                reset()\n            }\n            else{\n                setTimeout(() => reset(), 900)\n            }\n        }\n    }, [firstChoice, secondChoice])\n    \n    \n    //reset choices and increases turns\n    const reset = () => {\n        setChoiceOne(null)\n        setChoiceTwo(null)\n        setDisabled(false)\n        setTurns(prevTurns => prevTurns + 1)\n    }\n  \n    useEffect(() => {\n        shuffleCards()\n    }, [])\n    \n    return(\n        <div className=\"App\">\n             <h1> Minecraft Memory Game </h1>\n             <start-button onClick={shuffleCards}> New Game </start-button>\n              <h5> Moves: {turns} </h5>\n           \n           <div className=\"grid\">\n                {cards.map(card => (\n                    <Card\n                        key={card.id}\n                        card={card}\n                        handleChoice = {handleChoice}\n                        flipped={card === firstChoice || card === secondChoice ||card.matched}\n                        disabled = {disabled}\n                    />\n            ))}\n           </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AAAA;AAEzB,MAAMC,UAAU,GAAG,CACf;EAAC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAK,CAAC;AAAU;AAChD;EAAC,KAAK,EAAE,iBAAiB;EAAEA,OAAO,EAAE;AAAK,CAAC,EAC1C;EAAC,KAAK,EAAE,iBAAiB;EAAEA,OAAO,EAAE;AAAK,CAAC,EAC1C;EAAC,KAAK,EAAE,eAAe;EAAEA,OAAO,EAAE;AAAK,CAAC,EACxC;EAAC,KAAK,EAAE,eAAe;EAAEA,OAAO,EAAE;AAAK,CAAC,EACxC;EAAC,KAAK,EAAE,eAAe;EAAEA,OAAO,EAAE;AAAK,CAAC,EACxC;EAAC,KAAK,EAAE,aAAa;EAAEA,OAAO,EAAE;AAAK,CAAC,EACtC;EAAC,KAAK,EAAE,gBAAgB;EAAEA,OAAO,EAAE;AAAK,CAAC,CAC5C;AAED,SAASC,GAAG,GAAG;EAAA;EAEX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACU,YAAY,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAGnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMgB,YAAY,GAAG,MAAM;IACvB,MAAMC,aAAa,GAAG,CAAC,GAAGd,UAAU,EAAE,GAAGA,UAAU,CAAC,CAC/Ce,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC,CAC/BC,GAAG,CAAEC,IAAI,KAAM;MAAC,GAAGA,IAAI;MAAEC,EAAE,EAAEJ,IAAI,CAACC,MAAM;IAAG,CAAC,CAAC,CAAC,EAAC;;IAEpDX,YAAY,CAAC,IAAI,CAAC;IAClBE,YAAY,CAAC,IAAI,CAAC;IAClBJ,QAAQ,CAACU,aAAa,CAAC;IACvBF,QAAQ,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;;EAEA,MAAMS,YAAY,GAAIF,IAAI,IAAK;IAC3B,IAAGd,WAAW,IAAI,IAAI,EAAC;MACnBC,YAAY,CAACa,IAAI,CAAC;IACtB,CAAC,MACG;MACAX,YAAY,CAACW,IAAI,CAAC;IACtB;EACJ,CAAC;;EAED;;EAEArB,SAAS,CAAC,MAAM;IACZ,IAAGO,WAAW,IAAIE,YAAY,EAAC;MAC3BG,WAAW,CAAC,IAAI,CAAC;MACjB,IAAGL,WAAW,CAACiB,GAAG,KAAKf,YAAY,CAACe,GAAG,EAAC;QACpClB,QAAQ,CAACmB,SAAS,IAAI;UAClB,OAAOA,SAAS,CAACL,GAAG,CAACC,IAAI,IAAI;YACzB,IAAGA,IAAI,CAACG,GAAG,IAAIjB,WAAW,CAACiB,GAAG,EAAC;cAC3B,OAAO;gBAAC,GAAGH,IAAI;gBAAElB,OAAO,EAAE;cAAI,CAAC;YACnC,CAAC,MAAI;cACD,OAAOkB,IAAI;YACf;UACJ,CAAC,CAAC;QACN,CAAC,CAAC;QACFK,KAAK,EAAE;MACX,CAAC,MACG;QACAC,UAAU,CAAC,MAAMD,KAAK,EAAE,EAAE,GAAG,CAAC;MAClC;IACJ;EACJ,CAAC,EAAE,CAACnB,WAAW,EAAEE,YAAY,CAAC,CAAC;;EAG/B;EACA,MAAMiB,KAAK,GAAG,MAAM;IAChBlB,YAAY,CAAC,IAAI,CAAC;IAClBE,YAAY,CAAC,IAAI,CAAC;IAClBE,WAAW,CAAC,KAAK,CAAC;IAClBE,QAAQ,CAACc,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACxC,CAAC;EAED5B,SAAS,CAAC,MAAM;IACZe,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,wBACf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgC,eAChC;MAAc,OAAO,EAAEA,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA0B,eAC7D;MAAA,uBAAaF,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAE5B;MAAK,SAAS,EAAC,MAAM;MAAA,UACfR,KAAK,CAACe,GAAG,CAACC,IAAI,iBACX,QAAC,IAAI;QAED,IAAI,EAAEA,IAAK;QACX,YAAY,EAAIE,YAAa;QAC7B,OAAO,EAAEF,IAAI,KAAKd,WAAW,IAAIc,IAAI,KAAKZ,YAAY,IAAGY,IAAI,CAAClB,OAAQ;QACtE,QAAQ,EAAIQ;MAAS,GAJhBU,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAMvB;IAAC;MAAA;MAAA;MAAA;IAAA,QACG;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd;AAAC,GAvFQlB,GAAG;AAAA,KAAHA,GAAG;AAyFZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}